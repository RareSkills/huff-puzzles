
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)

#define macro ADD1() = takes(0) returns(0) {
    // load the first argument onto the stack
    0x04 calldataload  // [uint_arg]
    0x01               // [1, uint_arg]
    // add the two values at the top of the stack. Result pushed onto the stack
    add                // [add_result]

    // store the result of the addition at memory offset 0
    0x00               // [0, add_result]
    mstore             // []

    // return the result (32 bytes) of the addition
    0x20               // [32]
    0x00               // [0, 32]
    return             // []
}

#define macro MAIN() = takes(0) returns(0) {
    // load the function signature onto the stack
    0x00 calldataload 0xE0 shr  // [func_sig]

    // dispatch to the appropriate function (add1)
    dup1 __FUNC_SIG(add1) eq add1 jumpi

    // revert on failed dispatch
    0x00 0x00 revert

    add1:
        ADD1()
}
